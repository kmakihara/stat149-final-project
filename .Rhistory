knitr::opts_chunk$set(echo = TRUE)
#### Include R Scripts without including in the markdown ####
na.convert.mean = function (frame)
{
vars <- names(frame)
if (!is.null(resp <- attr(attr(frame, "terms"), "response"))) {
vars <- vars[-resp]
x <- frame[[resp]]
pos <- is.na(x)
if (any(pos)) {
frame <- frame[!pos, , drop = FALSE]
warning(paste(sum(pos), "observations omitted due to missing values in the response"))
}
}
for (j in vars) {  #j is variable names
x <- frame[[j]]
pos <- is.na(x)
if (any(pos)) {
if (length(levels(x))) {   # factors
xx <- as.character(x)
xx[pos] <- "NA"
x <- factor(xx, exclude = NULL)
}
else if (is.matrix(x)) {   # matrices
ats <- attributes(x)
x.na <- 1*pos
#               x[pos] <- 0
w <- !pos
n <- nrow(x)
TT <- array(1, c(1, n))
xbar <- (TT %*% x)/(TT %*% w)
xbar <- t(TT) %*% xbar
x[pos] <- xbar[pos]
attributes(x) <- ats
attributes(x.na) <- ats
dimnames(x.na)[[2]]=paste(dimnames(x)[[2]],".na",sep='')
frame[[paste(j,".na",sep='')]] <- x.na
} else {   # ordinary numerical vector
ats <- attributes(x)
x[pos] <- mean(x[!pos])
#               x[pos] <- 0
x.na <- 1*pos
frame[[paste(j,".na",sep='')]] <- x.na
attributes(x) <- ats
}
frame[[j]] <- x
}
}
frame
}
#### Images are included by doing this #####
knitr::include_graphics("./pset4_q1.jpg")
test <- read.csv("./Data/test.csv")
library(brglm)
library(aod)
library(faraway)
library(nnet)
library(arm)
train <- read.csv("./Data/train.csv")
test <- read.csv("./Data/test.csv")
summary(train)
help(dvisits)
mydvisits = dvisits
mydvisits$chcond.int = factor(as.numeric(interaction(mydvisits$chcond1, mydvisits$chcond2)) - 1)
glm(doctorco~sex, family=binomial)
glm(doctorco~sex, family=binomial, data=mydvisits)
knitr::opts_chunk$set(echo = TRUE)
#### Include R Scripts without including in the markdown ####
na.convert.mean = function (frame)
{
vars <- names(frame)
if (!is.null(resp <- attr(attr(frame, "terms"), "response"))) {
vars <- vars[-resp]
x <- frame[[resp]]
pos <- is.na(x)
if (any(pos)) {
frame <- frame[!pos, , drop = FALSE]
warning(paste(sum(pos), "observations omitted due to missing values in the response"))
}
}
for (j in vars) {  #j is variable names
x <- frame[[j]]
pos <- is.na(x)
if (any(pos)) {
if (length(levels(x))) {   # factors
xx <- as.character(x)
xx[pos] <- "NA"
x <- factor(xx, exclude = NULL)
}
else if (is.matrix(x)) {   # matrices
ats <- attributes(x)
x.na <- 1*pos
#               x[pos] <- 0
w <- !pos
n <- nrow(x)
TT <- array(1, c(1, n))
xbar <- (TT %*% x)/(TT %*% w)
xbar <- t(TT) %*% xbar
x[pos] <- xbar[pos]
attributes(x) <- ats
attributes(x.na) <- ats
dimnames(x.na)[[2]]=paste(dimnames(x)[[2]],".na",sep='')
frame[[paste(j,".na",sep='')]] <- x.na
} else {   # ordinary numerical vector
ats <- attributes(x)
x[pos] <- mean(x[!pos])
#               x[pos] <- 0
x.na <- 1*pos
frame[[paste(j,".na",sep='')]] <- x.na
attributes(x) <- ats
}
frame[[j]] <- x
}
}
frame
}
logLoss(train.na$suppdem, preds)
knitr::opts_chunk$set(echo = TRUE)
#### Set up process here ####
#install.packages("faraway")
#install.packages("nnet")
#install.packages("car")
#install.packages("kyotil")
#install.packages("arm")
logLoss(train.na$suppdem, preds)
test <- read.csv("./Data/test.csv")
#library(brglm)
#library(aod)
#library(nnet)
#library(arm)
#library(faraway)
#library(Metrics)
train <- read.csv("./Data/train.csv")
test <- read.csv("./Data/test.csv")
set.seed(149)
# 70% of train as myrtrain and 30% as myvalidate
sample <- sample.int(n = nrow(train), size = floor(.70*nrow(train)), replace = F)
mytrain <- train[sample, ]
myvalidate  <- train[-sample, ]
names(mytrain)
summary(mytrain)
mytrain$suppdem = as.numeric(mytrain$suppdem) - 1
myvalidate$suppdem = as.numeric(myvalidate$suppdem) - 1
levels(mytrain$education) <- c(levels(mytrain$education), "none")
mytrain$education[is.na(mytrain$education)] <- "none"
levels(myvalidate$education) <- c(levels(myvalidate$education), "none")
myvalidate$education[is.na(myvalidate$education)] <- "none"
levels(test$education) <- c(levels(test$education), "none")
test$education[is.na(test$education)] <- "none"
glm(formula = suppdem ~ 1, family = binomial, data = mytrain)
glm(formula = suppdem ~ 1, family = "binomial", data = mytrain)
glm(formula = suppdem ~ 1, family = "binomial", data = mytrain)
??glm
glm(formula = suppdem ~ 1, family = "binomial(link=probit)", data = mytrain)
glm(formula = suppdem ~ 1, family = "binomial(link="probit"")", data = mytrain)
glm(formula = suppdem ~ 1, family = "binomial(link="probit")", data = mytrain)
glm(formula = suppdem ~ 1, family = 'binomial(link="probit")', data = mytrain)
glm(formula = suppdem ~ 1, family = binomial(link="probit"', data = mytrain)
''
glm(formula = suppdem ~ 1, family = binomial(link="probit"), data = mytrain)
glm(formula = suppdem ~ 1, family = `binomial(link="probit")`, data = mytrain)
glm(formula = suppdem ~ 1, family = 'binomial(link="probit")', data = mytrain)
